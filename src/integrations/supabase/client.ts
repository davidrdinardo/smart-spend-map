
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import type { DatabaseWithTables } from './schema';

const SUPABASE_URL = "https://nefaagbbbvfgssxgacly.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5lZmFhZ2JiYnZmZ3NzeGdhY2x5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc1ODY2NzcsImV4cCI6MjA2MzE2MjY3N30.sMNg5a68enUisyAKd6b4EqDqLkeYNDqjLZb_gCCjHoY";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<DatabaseWithTables>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      storageKey: 'sb-moneymap-auth-token',
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      flowType: 'pkce'
    }
  }
);

// Add diagnostic helper to check auth state
export const checkAuthState = async () => {
  try {
    const { data, error } = await supabase.auth.getSession();
    console.log("Current auth state:", {
      hasSession: !!data.session,
      sessionExpiresAt: data.session?.expires_at,
      error: error?.message,
      user: data.session?.user?.id
    });
    
    // Check local storage for auth data
    const authData = localStorage.getItem('sb-moneymap-auth-token');
    console.log("Auth data in localStorage:", !!authData);
    
    return { session: data.session, error };
  } catch (err) {
    console.error("Error checking auth state:", err);
    return { session: null, error: err };
  }
};

// Enhanced debug helper
export const debugSupabaseSession = () => {
  const lsData = localStorage.getItem('sb-moneymap-auth-token');
  let parsedData = null;
  try {
    parsedData = lsData ? JSON.parse(lsData) : null;
  } catch (e) {
    console.error("Error parsing localStorage auth data:", e);
  }
  
  return {
    hasLocalStorage: !!lsData,
    parsedData,
    currentTimestamp: new Date().toISOString()
  };
};

// Helper function to fix potential auth loop issues
export const refreshSessionIfNeeded = async () => {
  const { data, error } = await supabase.auth.getSession();
  
  if (data.session) {
    // We have a session, check if it's expired or about to expire
    const now = Math.floor(Date.now() / 1000);
    const expiresAt = data.session.expires_at ?? 0; // Add null check with default value
    const timeToExpire = expiresAt - now;
    
    console.log(`Session expires in ${timeToExpire} seconds`);
    
    // If session expires in less than 5 minutes, refresh it
    if (timeToExpire < 300) {
      console.log("Session expiring soon, refreshing...");
      return await supabase.auth.refreshSession();
    }
    
    return { data, error: null };
  }
  
  return { data, error };
};

// Clear session completely (for troubleshooting)
export const clearSupabaseSession = async () => {
  try {
    localStorage.removeItem('sb-moneymap-auth-token');
    console.log("Supabase session storage cleared");
    return true;
  } catch (e) {
    console.error("Failed to clear Supabase session:", e);
    return false;
  }
};

// Define RPC function type for bucket policy operations
interface BucketPolicyParams {
  bucket_name: string;
}

// Add this function to help with storage bucket policies
export const setPublicBucketPolicy = async (bucketName: string): Promise<boolean> => {
  try {
    // First try to create an RPC function if it doesn't exist
    try {
      // Cast the rpc method to accept our params
      await (supabase.rpc as any)('create_bucket_public_policy', { 
        bucket_name: bucketName 
      });
    } catch (e) {
      console.log('Policy function may already exist:', e);
    }
    
    // Then use the RPC function to set policies
    const { error } = await (supabase.rpc as any)('set_bucket_public_policy', { 
      bucket_name: bucketName 
    });
    
    if (error) {
      console.error("Error setting bucket policy:", error);
      return false;
    }
    
    return true;
  } catch (error) {
    console.error("Failed to set bucket policy:", error);
    return false;
  }
};
