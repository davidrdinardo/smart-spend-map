
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://nefaagbbbvfgssxgacly.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5lZmFhZ2JiYnZmZ3NzeGdhY2x5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc1ODY2NzcsImV4cCI6MjA2MzE2MjY3N30.sMNg5a68enUisyAKd6b4EqDqLkeYNDqjLZb_gCCjHoY";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Debugging functions for Auth.tsx
export const checkAuthState = async () => {
  try {
    const { data, error } = await supabase.auth.getSession();
    if (error) {
      console.error("Auth state check error:", error);
      return { session: null, user: null, error };
    }
    return { 
      session: data.session,
      user: data.session?.user || null,
      error: null 
    };
  } catch (err) {
    console.error("Unexpected error during auth check:", err);
    return { session: null, user: null, error: err };
  }
};

export const debugSupabaseSession = () => {
  try {
    // Check what's stored in local storage for debugging
    const localStorageSession = localStorage.getItem('supabase.auth.token');
    return localStorageSession ? 'Session exists in localStorage' : 'No session in localStorage';
  } catch (err) {
    return `Error accessing localStorage: ${err}`;
  }
};

export const clearSupabaseSession = () => {
  try {
    localStorage.removeItem('supabase.auth.token');
    return true;
  } catch (err) {
    console.error("Error clearing session:", err);
    return false;
  }
};
