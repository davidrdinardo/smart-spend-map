
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import type { DatabaseWithTables } from './schema';

const SUPABASE_URL = "https://nefaagbbbvfgssxgacly.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5lZmFhZ2JiYnZmZ3NzeGdhY2x5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc1ODY2NzcsImV4cCI6MjA2MzE2MjY3N30.sMNg5a68enUisyAKd6b4EqDqLkeYNDqjLZb_gCCjHoY";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<DatabaseWithTables>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      storageKey: 'sb-moneymap-auth-token',
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      flowType: 'pkce'
    }
  }
);

// Add diagnostic helper to check auth state
export const checkAuthState = async () => {
  try {
    const { data, error } = await supabase.auth.getSession();
    console.log("Current auth state:", {
      hasSession: !!data.session,
      sessionExpiresAt: data.session?.expires_at,
      error: error?.message,
      user: data.session?.user?.id
    });
    
    // Check local storage for auth data
    const authData = localStorage.getItem('sb-moneymap-auth-token');
    console.log("Auth data in localStorage:", !!authData);
    
    return { session: data.session, error };
  } catch (err) {
    console.error("Error checking auth state:", err);
    return { session: null, error: err };
  }
};

// Enhanced debug helper
export const debugSupabaseSession = () => {
  const lsData = localStorage.getItem('sb-moneymap-auth-token');
  let parsedData = null;
  try {
    parsedData = lsData ? JSON.parse(lsData) : null;
  } catch (e) {
    console.error("Error parsing localStorage auth data:", e);
  }
  
  return {
    hasLocalStorage: !!lsData,
    parsedData,
    currentTimestamp: new Date().toISOString()
  };
};

// Helper function to fix potential auth loop issues
export const refreshSessionIfNeeded = async () => {
  const { data, error } = await supabase.auth.getSession();
  
  if (data.session) {
    // We have a session, check if it's expired or about to expire
    const now = Math.floor(Date.now() / 1000);
    const expiresAt = data.session.expires_at ?? 0; // Add null check with default value
    const timeToExpire = expiresAt - now;
    
    console.log(`Session expires in ${timeToExpire} seconds`);
    
    // If session expires in less than 5 minutes, refresh it
    if (timeToExpire < 300) {
      console.log("Session expiring soon, refreshing...");
      return await supabase.auth.refreshSession();
    }
    
    return { data, error: null };
  }
  
  return { data, error };
};

// Clear session completely (for troubleshooting)
export const clearSupabaseSession = async () => {
  try {
    localStorage.removeItem('sb-moneymap-auth-token');
    console.log("Supabase session storage cleared");
    return true;
  } catch (e) {
    console.error("Failed to clear Supabase session:", e);
    return false;
  }
};

// Type for RPC bucket policy operations
interface BucketPolicyParams {
  bucket_name: string;
}

// Improved bucket policy setter with better error handling
export const setPublicBucketPolicy = async (bucketName: string): Promise<boolean> => {
  try {
    console.log(`Attempting to set public bucket policy for: ${bucketName}`);
    
    // First, check if we're authenticated
    const { data: authData } = await supabase.auth.getSession();
    if (!authData.session?.user) {
      console.error("Not authenticated, cannot set bucket policy");
      return false;
    }
    
    // Try direct bucket creation first (most reliable method)
    try {
      const { data: bucketList, error: listError } = await supabase.storage.listBuckets();
      
      if (listError) {
        console.error("Error listing buckets:", listError);
        return false;
      }
      
      const bucketExists = bucketList?.some(b => b.name === bucketName);
      
      if (!bucketExists) {
        console.log(`Bucket ${bucketName} doesn't exist, creating it...`);
        
        // Try to create bucket with public access
        const { data, error } = await supabase.storage.createBucket(bucketName, {
          public: true,
          fileSizeLimit: 52428800 // 50MB
        });
        
        if (error) {
          // If bucket already exists despite not showing up in list, that's okay
          if (error.message.includes('already exists')) {
            console.log(`Bucket ${bucketName} already exists despite not showing in list`);
          } else {
            console.error("Error creating bucket:", error);
            return false;
          }
        } else {
          console.log(`Bucket ${bucketName} created successfully`);
        }
      } else {
        console.log(`Bucket ${bucketName} already exists`);
      }
      
      // Try to update existing bucket to be public
      const { error: updateError } = await supabase.storage.updateBucket(bucketName, {
        public: true,
        fileSizeLimit: 52428800 // 50MB
      });
      
      if (updateError && !updateError.message.includes('already exists')) {
        console.error(`Error updating bucket ${bucketName}:`, updateError);
      }
      
    } catch (e) {
      console.error("Error in bucket creation/update:", e);
    }
    
    // Attempt to create RLS policy function if it doesn't exist
    try {
      // We ignore errors here as the function might already exist
      await (supabase.rpc as any)('create_bucket_public_policy', { 
        bucket_name: bucketName 
      } as BucketPolicyParams).catch(e => {
        console.log('Policy function may already exist, continuing...', e);
      });
    } catch (e) {
      console.log('Error with create_bucket_public_policy, continuing...', e);
    }
    
    // Then try to use the policy function
    try {
      const { error } = await (supabase.rpc as any)('set_bucket_public_policy', { 
        bucket_name: bucketName 
      } as BucketPolicyParams);
      
      if (error) {
        console.error("Error setting bucket policy:", error);
        // Continue anyway - RPC functions are a secondary approach
      } else {
        console.log(`Public bucket policy set successfully for: ${bucketName}`);
      }
    } catch (e) {
      console.error("Error calling set_bucket_public_policy:", e);
      // Continue anyway - if the bucket is already public this is fine
    }
    
    // Final check - try a simple operation to verify permissions
    try {
      const userId = authData.session.user.id;
      const testPath = `${userId}/test-permission.txt`;
      const { error: testError } = await supabase.storage
        .from(bucketName)
        .upload(testPath, new Blob(['test']), { upsert: true });
        
      if (testError) {
        console.error("Permission test failed:", testError);
        return false;
      }
      
      // Clean up test file
      await supabase.storage.from(bucketName).remove([testPath]);
      return true;
    } catch (testError) {
      console.error("Permission test exception:", testError);
      return false;
    }
  } catch (error) {
    console.error("Failed to set bucket policy:", error);
    return false;
  }
};
